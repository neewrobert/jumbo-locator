package org.neewrobert.jumbo.application.mapper;

import org.neewrobert.jumbo.adapter.in.web.store.StoreDto;
import org.neewrobert.jumbo.adapter.out.persistence.StoreEntity;
import org.neewrobert.jumbo.domain.model.Store;
import org.springframework.data.mongodb.core.geo.GeoJsonPoint;
import org.springframework.stereotype.Component;

@Component
public class StoreMapper {

    public StoreDto toDto(Store store) {
        return new StoreDto(
                store.uuid(),
                store.city(),
                store.postalCode(),
                store.street(),
                store.street2(),
                store.street3(),
                store.addressName(),
                store.longitude(),
                store.latitude(),
                store.complexNumber(),
                store.showWarningMessage(),
                store.todayOpen(),
                store.locationType(),
                store.collectionPoint() != null ? store.collectionPoint() : false,
                store.sapStoreID(),
                store.todayClose()
        );
    }

    public Store toDomain(StoreDto storeDto) {
        return new Store(
                null, // id will be generated by MongoDB
                storeDto.city(),
                storeDto.postalCode(),
                storeDto.street(),
                storeDto.street2(),
                storeDto.street3(),
                storeDto.addressName(),
                storeDto.uuid(),
                storeDto.longitude(),
                storeDto.latitude(),
                storeDto.complexNumber(),
                storeDto.showWarningMessage(),
                storeDto.todayOpen(),
                storeDto.locationType(),
                storeDto.collectionPoint(),
                storeDto.sapStoreID(),
                storeDto.todayClose()
        );
    }

    public StoreEntity toEntity(Store storeDomain) {

        return new StoreEntity(
                null, // id will be generated by MongoDB
                storeDomain.city(),
                storeDomain.postalCode(),
                storeDomain.street(),
                storeDomain.street2(),
                storeDomain.street3(),
                storeDomain.addressName(),
                storeDomain.uuid(),
                new GeoJsonPoint(storeDomain.longitude(), storeDomain.latitude()),
                storeDomain.complexNumber(),
                storeDomain.showWarningMessage(),
                storeDomain.todayOpen(),
                storeDomain.locationType(),
                storeDomain.collectionPoint(),
                storeDomain.sapStoreID(),
                storeDomain.todayClose()
        );
    }

    public Store toDomain(StoreEntity entity) {
        return new Store(
                entity.id(),
                entity.city(),
                entity.postalCode(),
                entity.street(),
                entity.street2(),
                entity.street3(),
                entity.addressName(),
                entity.uuid(),
                entity.location().getX(),
                entity.location().getY(),
                entity.complexNumber(),
                entity.showWarningMessage(),
                entity.todayOpen(),
                entity.locationType(),
                entity.collectionPoint(),
                entity.sapStoreID(),
                entity.todayClose()
        );
    }
}

